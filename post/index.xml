<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My New Hugo Site</title>
    <link>https://zzhorun.github.io/post/</link>
    <description>Recent content in Posts on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 24 Nov 2020 23:19:55 +0800</lastBuildDate><atom:link href="https://zzhorun.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LinkedList源码解读</title>
      <link>https://zzhorun.github.io/post/linkedlist/</link>
      <pubDate>Tue, 24 Nov 2020 23:19:55 +0800</pubDate>
      
      <guid>https://zzhorun.github.io/post/linkedlist/</guid>
      <description>LinkedList源码解读： 特点说明：  LinkedLIst是一个实现了==List==接口和==Deque==接口的==双端链表==； LinkedList底层的链表结构使它支持==高效的插入==和==删除操作==，另外它实现了Deque接口，使得LinkedList类也具有队列的特性； LinkedList==不是线程安全==的，如果想使LinkedList变成线程安全的，可以调用静态类==Collections==类中的==sychronizedList==方法：  List list=Collections.synchronizedList(new LinkedList(...)); 关键字解读： transient：在LinkedList源码中，针对其中的一些变量使用了transient关键字进行修饰，例如LinkedList的size，List中的第一个节点first，最后一个节点last。这个关键字表示的意思是这些被该关键字修饰的变量不会被序列化。由于LinkedList实现了Serializable接口，所以这个对象就可以被序列化，但是其中的size，first，last这些LinkedList的属性不会被序列化，生命周期仅存在与调用者的内存中，不会被写进磁盘里面持久化。 modCount: 这个值会用来和exceptedModCount比较，是用来存储修改统计数，exceptedModCount是期望的改变计数，用来实现fail-fast机制。这个值是抽象类AbstractList中的成员变量。也就是LinkedList中的add，remove，clear这些方法会造成modCount的改变。迭代过程中如何调用这些方法就会造成modCount的增加，使迭代类中的exceptedModCount和modCount不相等，就可能抛出ConcurrentModificationException异常。
函数解读：  checkPositionIndex函数：这个函数在LinkedList类中中被频繁调用，其作用是检查当前传入的参数index是不是在当前LinkedList对象的size范围内（0&amp;lt;=index&amp;lt;=size），如果不是的话则抛出一个下标越界异常。  private void checkPositionIndex(int index){ if(!isPositionIndex(index)) throw new IndexOutOfBoundsException(outOfBoundsMsg(index)); } 在LinkedList中的ListItr类中有一个特殊的函数checkForComodification函数，这个函数的目的是比较modCount和expectedModCount这两个值是否相等，如果不相等的话会抛出ConcurrentModificationException异常。主要目的是为了fail-fast机制服务，fail-fast是java集合的一种错误检测机制，当多个线程对集合进行结构上的改变的操作时，有可能会产生fail-fast机制。  final void checkForComodification(){ if(modCount != expectedModCount) throw new ConcurrentModificationException(); } 在LinkedList中有很多种add功能的函数，其中的调用关系如下图：  graph LR offerLast--&amp;gt;addLast addLast--&amp;gt;linkLast offer--&amp;gt;add add--&amp;gt;linkLast add--&amp;gt;linkBefore offerFirst--&amp;gt;addFirst push--&amp;gt;addFirst addFirst--&amp;gt;linkFirst addAll linkLast函数：该函数就是将作为参数的Node值添加到最末尾。
void linkLast(E e){ final Node&amp;lt;E&amp;gt; l = last; final Node&amp;lt;E&amp;gt; newNode = new Node&amp;lt;&amp;gt;(l, e, null); last = neNode; if(l == null) first = newNode; else l.</description>
    </item>
    
    <item>
      <title>ArrayList源码解读</title>
      <link>https://zzhorun.github.io/post/blog/</link>
      <pubDate>Tue, 24 Nov 2020 22:56:46 +0800</pubDate>
      
      <guid>https://zzhorun.github.io/post/blog/</guid>
      <description>ArrayList源码解读： 特点说明：  ArrayList底层是数组队列，相当于动态数组。和java的数组相比，它的容量能动态增长。当添加大量的元素时，应用程序可以通过扩容机制来增加ArrayList实例的容量。这可以减少递增式再分配的数量。 同样的由于ArrayList和LinkedList二者的结构不同，在增删查改方面的速度也是大不一样的。对于ArrayList来说，线性表的顺序存储，插入、删除元素的时间复杂度为O(n)，求表长以及增加元素，取第i元素的时间复杂度为O(1) LinkedList不支持高效的随机元素访问，而ArrayList支持。 ArrayList的空间浪费主要体现在list列表的结尾会预留一定的容量空间，而LinkedList的空间花费则体现在它的每一个元素都需要消耗比ArrayList更多的空间(因为要存放直接后继和直接前驱以及数据)。  关键字解读： RandomAccess：RandomAccess这个是ArrayList所实现的随机接入接口。从源码中看这个接口中并没有任何的内容。只是作为一个标示，标记当前的接口具有随机访问功能，所以并不是说ArrayList实现了RandomAccess接口才具有快速随机访问功能的。
函数解读：(针对ArrayList扩容的源代码放在最后) 1. trimToSize函数：简单来说就是对当前的ArrayList进行瘦身。 private static final Object[] EMPTY_ELEMENTDATA = {}; ....... public void trimToSize(){ modCount ++; if(size &amp;lt; elementData.length) { elementData = (size == 0) ? EMPTY_ELEMENTDATA : Arrays.copyOf(elementData, size); } } 2. ArrayList带集合参数的构造函数： 构造一个包含指定集合的元素的列表。 public ArrayList(Collection&amp;lt;? extends E&amp;gt; c) { elementData = c.toArray(); //如果指定集合元素个数不为0  if ((size = elementData.length) != 0) { // c.toArray 可能返回的不是Object类型的数组，所以加上下面的语句用于判断，  //这里用到了反射里面的getClass()方法  if (elementData.</description>
    </item>
    
  </channel>
</rss>
